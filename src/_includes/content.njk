{% for property, value in data.properties %}
<section id="{{property}}-wrapper">
	<h2 class="content-title">{{ property }}</h2>
		<div class="content-grid">
			<div class="column">
				<div class="subtitle">Initial render</div>
				<div class="row">
					{% for i in range(3) %}
						<div class="button-wrapper column">
							{% set engine = i | getEngine %}
							<p aria-label="{{engine}}" class="engine">{{engine | truncate(1, true, '') | capitalize}}</p>
							<button aria-controls="expander-{{property}}" aria-pressed="false" aria-label="Toggle to display details for {{ property}} in {{ engine }}." data-engine-name={{ engine }} data-property-name={{ property }} class="content-list">
								{% set engineValues = value.initial[engine] %}
								<div data-step="layout" class="square layout is-valid-{{engineValues.layout}}">
									{% if engineValues.layout %}
										<p>L</p>
									{% endif %}
								</div>
								<div data-step="paint" class="square paint is-valid-{{engineValues.paint}}">
									{% if engineValues.paint %}
										<p>P</p>
									{% endif %}
								</div>
								<div data-step="composite" class="square composite is-valid-{{engineValues.composite}}">
									{% if engineValues.composite %}
										<p>C</p>
									{% endif %}
								</div>
							</button>
						</div>
					{% endfor %}
				</div>
			</div>

			<div class="column">
				<div class="subtitle">Subsequent updates</div>
				<div class="row">
					{% for i in range(3) %}
						<div class="column button-wrapper">
							{% set engine = i | getEngine %}
							<p aria-label="{{engine}}" class="engine">{{engine | truncate(1, true, '') | capitalize}}</p>
							<button aria-controls="expander-{{property}}" aria-pressed="false" aria-label="Toggle to display details for {{ property}} in {{ engine }}." data-engine-name={{ engine }} data-property-name={{ property }} class="content-list">
								{% set engineValues = value.change[engine] %}
								<div data-step="layout" class="square layout is-valid-{{engineValues.layout}}">
									{% if engineValues.layout %}
										<p>L</p>
									{% endif %}
								</div>
								<div data-step="paint" class="square paint is-valid-{{engineValues.paint}}">
									{% if engineValues.paint %}
										<p>P</p>
									{% endif %}
								</div>
								<div data-step="composite" class="square composite is-valid-{{engineValues.composite}}">
									{% if engineValues.composite %}
										<p>C</p>
									{% endif %}
								</div>
							</button>
						</div>
					{% endfor %}
				</div>

		</div>
	</div>
	{% include 'accordion.njk' %}
</section>
{% endfor %}

<script type="module">
	import { pushAnimationToQueue } from './js/triggerAnimation.js'
	import { updateContent, clearExistingContent } from './js/updateContent.js'

	const buttonWrappers = document.querySelectorAll('.button-wrapper');
	const buttons = document.querySelectorAll('.content-list');

	buttonWrappers.forEach((buttonWrapper) => {
		buttonWrapper.addEventListener('click', (event) => {
			const button = event.target.closest('.content-list');
			if (!button) return;

			const prevSelected = button.classList.contains('selected');
			buttons.forEach((b) => {
				b.setAttribute('aria-pressed', 'false');
				b.classList.remove('selected')
			});

			button.classList.toggle('selected', !prevSelected);
			button.setAttribute('aria-pressed', `${!prevSelected}`);

			const property = button.dataset.propertyName;
			const children = Array.from(button.children);
			const stepChild = children.find((el) => el.classList.contains('is-valid-true'));
			const step = stepChild?.dataset.step ?? 'none';
			const engine = button.dataset.engineName;
			const selected = button.classList.contains('selected');

			if (selected) {
				pushAnimationToQueue({ propertyName: property, step });
				updateContent(engine, property, step);
			} else {
				pushAnimationToQueue({propertyName: null, step: null});
				clearExistingContent();
			}
		});
	})
</script>
