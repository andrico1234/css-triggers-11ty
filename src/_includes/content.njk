{% for property, value in data.properties %}
<section>
	<div>
		<h2 class="content-title">{{ property }}</h2>
			<div class="content-grid">
				<div class="column">
					<h3 class="subtitle">Initial render</h3>
					<div class="row">
						{% for i in range(3) %}
							<div class="button-wrapper column">
								{% set engine = i | getEngine %}
								<p class="engine">{{engine | truncate(1, true, '') | capitalize}}</p>
								<button data-engine-name={{ engine }} data-property-name={{ property }} class="content-list">
									{% set engineValues = value.initial[engine] %}
									<div data-step="layout" class="square layout is-valid-{{engineValues.layout}}"></div>
									<div data-step="paint" class="square paint is-valid-{{engineValues.paint}}"></div>
									<div data-step="composite" class="square composite is-valid-{{engineValues.composite}}"></div>
								</button>
							</div>
						{% endfor %}
					</div>
				</div>

				<div class="column">
					<h3 class="subtitle">Subsequent updates</h3>
					<div class="row">
						{% for i in range(3) %}
							<div class="column button-wrapper">
								{% set engine = i | getEngine %}
								<p class="engine">{{engine | truncate(1, true, '') | capitalize}}</p>
								<button data-engine-name={{ engine }} data-property-name={{ property }} class="content-list">
									{% set engineValues = value.change[engine] %}
									<div data-step="layout" class="square layout is-valid-{{engineValues.layout}}"></div>
									<div data-step="paint" class="square paint is-valid-{{engineValues.paint}}"></div>
									<div data-step="composite" class="square composite is-valid-{{engineValues.composite}}"></div>
								</button>
							</div>
						{% endfor %}
					</div>

			</div>
		</div>
		{% include 'accordion.njk' %}
	</div>
</section>
{% endfor %}

<style>
	section {
		margin-bottom: 4rem;
	}


	.content-title {
		align-self: center;
	}

	.row {
		display: flex;
		justify-content: space-between;
		gap: 12px;
	}

	.content-grid {
		display: grid;
		grid-template-columns: 1fr 3fr;
		gap: 32px;
		align-items: end;
	}

	.column {
		display: flex;
		flex-direction: column;
		align-items: start;
	}

	.subtitle {
		margin-bottom: 0.6rem;
		font-weight: 500;
	}

	.content-list .square {
		width: 24px;
		aspect-ratio: 1/1;
		background: var(--square-bg, var(--black));
	}

	.content-list {
		cursor: pointer;
		background-color: transparent;
		border: none;
		margin: 0;
		padding: 0;
		text-align: inherit;
		font: inherit;
		border-radius: 0;
		position: relative;
	}

	.content-list::after {
		content: '';
		display: block;
		position: absolute;
		inset: 0;
		background: var(--white);
		opacity: 0;
		transition: opacity 0.1s;
	}

	.content-list:hover::after {
		opacity: 0.1;
	}

	.content-list:active::after {
		opacity: 0.4;
	}

	.content-list.selected::after {
		opacity: 1;
	}

	.row .engine {
		font-family: var(--font-family-display);
		font-weight: bold;
		margin-bottom: 0;
		align-self: center;
	}

	.expander-content .property {
		font-family: monospace;
	}

	.expander-content .engine {
		text-transform: capitalize;
	}


	.content-list {
		list-style: none;
		padding-left: 0;
		margin: 0;
		border: 2px solid var(--white);
	}

	.content-list .square.layout.is-valid-true {
		--square-bg: var(--red);
	}

	.content-list .square.paint.is-valid-true {
		--square-bg: var(--purple);
	}

	.content-list .square.composite.is-valid-true {
		--square-bg: var(--blue);
	}
</style>

<script type="module">
	import { pushAnimationToQueue } from './js/triggerAnimation.js'
	import { updateContent, clearExistingContent } from './js/updateContent.js'

	const buttonWrappers = document.querySelectorAll('.button-wrapper');
	const buttons = document.querySelectorAll('.content-list');

	buttonWrappers.forEach((buttonWrapper) => {
		buttonWrapper.addEventListener('click', (event) => {
			const button = event.target.closest('.content-list');
			if (!button) return;

			const prevSelected = button.classList.contains('selected');
			buttons.forEach((b) => b.classList.remove('selected'));
			button.classList.toggle('selected', !prevSelected);

			const property = button.dataset.propertyName;
			const children = Array.from(button.children);
			const stepChild = children.find((el) => el.classList.contains('is-valid-true'));
			const step = stepChild?.dataset.step ?? 'none';
			const engine = button.dataset.engineName;
			const selected = button.classList.contains('selected');

			if (selected) {
				pushAnimationToQueue({ propertyName: property, step });
				updateContent(engine, property, step);
			} else {
				pushAnimationToQueue({propertyName: null, step: null});
				clearExistingContent();
			}
		});
	})
</script>
